// CREATED BY HARRIS NEWSTEDER
//
// DESCRIPTION:
//

////////////////////////////////////////////////////////////////////////////////
// INCLUDES
////////////////////////////////////////////////////////////////////////////////

#include <cstdlib>

#include "ros/ros.h"
#include "geometry_msgs/Pose2D.h"

////////////////////////////////////////////////////////////////////////////////
// CONSTANTS
////////////////////////////////////////////////////////////////////////////////

const char ID_OBSTACLE    = '*';
const char ID_PHOBOS      = 'P';
const char ID_DEIMOS      = 'D';
const char ID_PATH_PHOBOS = '-';
const char ID_PATH_DEIMOS = '+';

const unsigned int GRID_WIDTH  = 24;
const unsigned int GRID_HEIGHT = 12;

////////////////////////////////////////////////////////////////////////////////
// NODE VARIABLES
////////////////////////////////////////////////////////////////////////////////

char** grid = nullptr;

////////////////////////////////////////////////////////////////////////////////
// FUNCTION DECLARATIONS
////////////////////////////////////////////////////////////////////////////////

void init(void);
void cleanup(void);

////////////////////////////////////////////////////////////////////////////////
// ENTRY POINT
////////////////////////////////////////////////////////////////////////////////

int main(int argc, char** argv)
{
    ros::init(argc, argv, "world");
    ros::NodeHandle node_handle;
    ros::Rate loop_rate(3);

    init();

    while (ros::ok())
    {
        
        ros::spinOnce();
        loop_rate.sleep();
    }

    cleanup();

    return EXIT_SUCCESS;
}

////////////////////////////////////////////////////////////////////////////////
// FUNCTION DEFINITIONS
////////////////////////////////////////////////////////////////////////////////

void init(void)
{
    grid = new char*[GRID_HEIGHT];
    for (unsigned i = 0; i < GRID_HEIGHT; ++i) {
        grid[i] = new char[GRID_WIDTH];
    }

    // initialize grid values here
    for (unsigned y = 0; y < GRID_HEIGHT; ++y) {
        for (unsigned x = 0; x < GRID_WIDTH; ++x) {
            grid[y][x] = '!';    
        }
    }
}

void cleanup(void)
{
    for (unsigned i = 0; i < GRID_HEIGHT; ++i) {
        delete [] grid[i];
    }
    delete [] grid;
}

